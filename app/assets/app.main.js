!function(e){function t(t){for(var r,i,l=t[0],c=t[1],u=t[2],s=0,m=[];s<l.length;s++)i=l[s],Object.prototype.hasOwnProperty.call(a,i)&&a[i]&&m.push(a[i][0]),a[i]=0;for(r in c)Object.prototype.hasOwnProperty.call(c,r)&&(e[r]=c[r]);for(f&&f(t);m.length;)m.shift()();return o.push.apply(o,u||[]),n()}function n(){for(var e,t=0;t<o.length;t++){for(var n=o[t],r=!0,l=1;l<n.length;l++){var c=n[l];0!==a[c]&&(r=!1)}r&&(o.splice(t--,1),e=i(i.s=n[0]))}return e}var r={},a={0:0},o=[];function i(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=r,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(n,r,function(t){return e[t]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="/";var l=window.webpackJsonp=window.webpackJsonp||[],c=l.push.bind(l);l.push=t,l=l.slice();for(var u=0;u<l.length;u++)t(l[u]);var f=c;o.push([237,1]),n()}({237:function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),o=n(17),i=n.n(o),l=(n(98),n(19)),c=n(21),u=n(250),f=n(253),s=n(260),m=n(261),p=n(262);function d(){var e=b(["\n  padding: 10px;\n  background: red;\n"]);return d=function(){return e},e}function y(){var e=b(["\n  min-height: 200px;\n  padding: 0;\n  background: blue;\n"]);return y=function(){return e},e}function b(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var g=l.a.section(y()),h=l.a.section(d()),v=function(e){var t=e.top,n=e.bottom;return a.a.createElement("main",null,a.a.createElement(g,null,t),a.a.createElement(h,null,n))},O=n(87),E=n.n(O),S=(n(111),n(112),function(){return a.a.createElement(E.a,{style:{width:"100%"},mode:"sql",theme:"xcode",name:"UNIQUE_ID_OF_DIV",editorProps:{$blockScrolling:!0}})}),j=n(256),w=n(259),I=n(267),A=n(41),x=n(263),C=n(52),T=n(91),R=n(257),P=n(258),N=n(88),k=n.n(N);function D(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==l.return||l.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return B(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return B(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function B(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var L=Object(c.b)({key:"profiles",default:{1:{id:"1",oauth:!0,name:"EOS QA",url:"https://test.salesforce.com",clientId:"1234",clientKey:"5678",username:"Foo",password:"bar"},2:{id:"2",oauth:!1,name:"EOS PROD",url:"https://test.salesforce.com",clientId:"aaaaa",clientKey:"ccccc",username:"Foo",password:"Bar"}}}),U=Object(c.c)({key:"findProfileSelector",get:function(e){var t=(0,e.get)(L);return function(e){return n=t,r=e,k()(Object.entries(n).filter((function(e){return D(e,1)[0]===r})).map((function(e){return D(e,2)[1]})));var n,r}}}),H=n(89),M=n.n(H),F=n(265),W=n(264),z=n(252),_=n(266),G=n(254),$=n(255);function K(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Y(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function V(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==l.return||l.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return J(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return J(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function J(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Q=function(e){var t=e.profile,n=void 0===t?{id:Object(F.a)()}:t,o=e.onCancel,i=e.onSave,l=e.onDelete,c=V(Object(r.useState)(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?K(Object(n),!0).forEach((function(t){Y(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):K(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},n)),2),s=c[0],m=c[1],p=Object(r.useCallback)((function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return m(Object(A.a)(s,(function(t){return M()(t,e)})))}),[s]),d=Object(r.useCallback)((function(e){return function(t){return p(Y({},e,t.target.checked))}}),[p]),y=Object(r.useCallback)((function(e){return function(t){return p(Y({},e,t.target.value))}}),[p]),b=Object(r.useCallback)((function(){i&&i(s)}),[s,i]),g=Object(r.useCallback)((function(){l&&l(s)}),[s,l]);return a.a.createElement(u.a,null,a.a.createElement(W.a,{label:"OAuth Mode",marginBottom:15},a.a.createElement(z.a,{checked:s.oauth,onChange:d("oauth")})),a.a.createElement(_.a,{label:"Profile Name",value:s.name,marginBottom:5,marginRight:20,onChange:y("name")}),a.a.createElement(_.a,{label:"URL",value:s.url,marginBottom:5,marginRight:20,onChange:y("url")}),a.a.createElement(_.a,{label:"Username",value:s.username,marginBottom:5,marginRight:20,onChange:y("username")}),a.a.createElement(_.a,{label:"Password",value:s.password,marginBottom:5,marginRight:20,onChange:y("password")}),a.a.createElement(_.a,{label:"Client ID",value:s.clientId,marginBottom:5,marginRight:20,onChange:y("clientId")}),a.a.createElement(_.a,{label:"Client Key",value:s.clientKey,marginBottom:15,marginRight:20,onChange:y("clientKey")}),a.a.createElement(u.a,{display:"flex",marginRight:20},a.a.createElement(u.a,null,a.a.createElement(f.a,{icon:G.a,intent:"danger",onClick:g})),a.a.createElement(u.a,{flex:1,display:"flex",justifyContent:"flex-end"}),a.a.createElement(T.a,{appearance:"minimal",onClick:o,marginRight:5},"Cancel"),a.a.createElement(T.a,{appearance:"primary",intent:"success",iconAfter:$.a,onClick:b},"Save")))};function q(){return(q=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function X(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==l.return||l.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Z(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Z(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Z(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function ee(){var e=re(["\n  padding: 5px;\n  border-radius: 4px;\n"]);return ee=function(){return e},e}function te(){var e=re(["\n  padding: 10px;\n  cursor: pointer;\n  border-radius: 3px;\n  :hover {\n    background: #efefef;\n  }\n"]);return te=function(){return e},e}function ne(){var e=re(["\n  list-style-type: none;\n  padding: 0;\n  margin: 0;\n"]);return ne=function(){return e},e}function re(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}l.a.ul(ne()),l.a.li(te()),l.a.section(ee());var ae=function(e){var t=X(Object(r.useState)(void 0),2),n=t[0],o=t[1],i=X(Object(r.useState)(!1),2),l=i[0],s=i[1],m=X(Object(c.d)(L),2),p=m[0],d=m[1],y=Object(c.e)(U)(n),b=function(){o(void 0),s(!1)},g=function(e){!function(e){d(Object(A.a)(p,(function(t){t[e.id]=e})))}(e),b()},h=function(e){var t;t=e,d(Object(A.a)(p,(function(e){delete e[t.id]}))),b()};return a.a.createElement(u.a,q({margin:10,display:"flex",flexDirection:"column"},e),a.a.createElement(j.a,{size:600,marginBottom:20},"List of Profiles"),!y&&!l&&a.a.createElement(u.a,{flex:1,display:"flex",flexDirection:"column"},a.a.createElement(u.a,{flex:1,borderBottom:!0},a.a.createElement(x.a,null,Object.entries(p).map((function(e){var t=X(e,2)[1];return a.a.createElement(x.a.Item,{onClick:function(){return e=t.id,o(e);var e}},a.a.createElement(C.a,null,t.name))})))),a.a.createElement(u.a,{margin:10,display:"flex",justifyContent:"flex-end"},a.a.createElement(T.a,{iconBefore:R.a,intent:"success",onClick:function(){return s(!0)}},"New Profile"))),y&&a.a.createElement(u.a,{display:"flex",alignItems:"flex-start",padding:20,margin:0,elevation:2},a.a.createElement(u.a,null,a.a.createElement(f.a,{icon:P.a,appearance:"minimal",onClick:b})),a.a.createElement(u.a,{paddingLeft:20,flex:1},a.a.createElement(j.a,{paddingTop:7,paddingBottom:10},"Editing Profile '",y.name,"'"),a.a.createElement(Q,{profile:y,onCancel:b,onSave:g,onDelete:h}))),l&&a.a.createElement(u.a,{display:"flex",alignItems:"flex-start",padding:20,margin:0,elevation:2},a.a.createElement(u.a,null,a.a.createElement(f.a,{icon:P.a,appearance:"minimal",onClick:b})),a.a.createElement(u.a,{paddingLeft:20,flex:1},a.a.createElement(j.a,{paddingTop:7,paddingBottom:10},"Create a New Profile"),a.a.createElement(Q,{onCancel:b,onSave:g,onDelete:h}))))};function oe(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==l.return||l.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return ie(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return ie(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ie(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var le=[{title:"Profile",component:a.a.createElement(ae,{flex:1})},{title:"Settings",component:a.a.createElement(j.a,null,"Under Construction")}],ce=function(){var e=oe(Object(r.useState)(0),2),t=e[0],n=e[1];return a.a.createElement(u.a,{height:"100%",display:"flex",flexDirection:"column"},a.a.createElement(j.a,{size:800,marginTop:5,marginLeft:5,marginBottom:20},"Configuration"),a.a.createElement(u.a,{display:"flex",flex:1},a.a.createElement(w.a,{marginRight:24,style:{minWidth:"200px"}},le.map((function(e,r){return a.a.createElement(I.a,{key:e.title,id:e.title,isSelected:r===t,onSelect:function(){return n(r)},margin:5},e.title)}))),a.a.createElement(u.a,{flex:1,display:"flex",flexDirection:"column"},le.map((function(e,n){return a.a.createElement(u.a,{flex:1,flexDirection:"column",display:n===t?"flex":"none"},e.component)})))))};function ue(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==l.return||l.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return fe(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return fe(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function fe(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function se(){var e=function(e,t){t||(t=e.slice(0));return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(["\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  z-index: 2;\n  background: #fff;\n"]);return se=function(){return e},e}var me=l.a.div(se()),pe=function(){var e=ue(Object(r.useState)(!1),2),t=e[0],n=e[1];return a.a.createElement(c.a,null,a.a.createElement(me,null,a.a.createElement(u.a,{display:"flex",elevation:3,float:"right",padding:5},a.a.createElement(f.a,{appearance:"minimal",icon:s.a,onClick:function(){return n(!0)}}),a.a.createElement(f.a,{appearance:"minimal",icon:m.a,intent:"success"}))),a.a.createElement(p.a,{isShown:t,onCloseComplete:function(){return n(!1)}},a.a.createElement(ce,null)),a.a.createElement(v,{top:a.a.createElement(S,null),bottom:a.a.createElement("div",null,"Bottom Part")}))},de=n(90);Neutralino.init({load:function(){},pingSuccessCallback:function(){},pingFailCallback:function(){}}),i.a.render(a.a.createElement(pe,null),document.getElementById("root")),de.a()},90:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return r}));Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));function r(){"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()})).catch((function(e){console.error(e.message)}))}}).call(this,n(56))},98:function(e,t,n){var r=n(99);"string"==typeof r&&(r=[[e.i,r,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(101)(r,a);r.locals&&(e.exports=r.locals)},99:function(e,t,n){(t=n(100)(!1)).push([e.i,'/*\nMIT License\n\nCopyright (c) 2018 Neutralinojs\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE. */\n\nbody {\n  margin: 0;\n  padding: 0;\n}\n\n#neutralinoapp {\n  text-align: center;\n}\n#neutralinoapp h1 {\n  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;\n  font-size: 20px;\n  color: #000000;\n}\n#neutralinoapp a {\n  /* margin-left: 12px; */\n}\n#neutralinoapp span {\n  font-size: 12px;\n  font-weight: normal;\n}\n',""]),e.exports=t}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,