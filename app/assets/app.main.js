!function(e){function t(t){for(var r,i,l=t[0],c=t[1],u=t[2],s=0,m=[];s<l.length;s++)i=l[s],Object.prototype.hasOwnProperty.call(a,i)&&a[i]&&m.push(a[i][0]),a[i]=0;for(r in c)Object.prototype.hasOwnProperty.call(c,r)&&(e[r]=c[r]);for(f&&f(t);m.length;)m.shift()();return o.push.apply(o,u||[]),n()}function n(){for(var e,t=0;t<o.length;t++){for(var n=o[t],r=!0,l=1;l<n.length;l++){var c=n[l];0!==a[c]&&(r=!1)}r&&(o.splice(t--,1),e=i(i.s=n[0]))}return e}var r={},a={0:0},o=[];function i(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=r,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(n,r,function(t){return e[t]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="/";var l=window.webpackJsonp=window.webpackJsonp||[],c=l.push.bind(l);l.push=t,l=l.slice();for(var u=0;u<l.length;u++)t(l[u]);var f=c;o.push([295,1]),n()}({130:function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return r}));Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));function r(){"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()})).catch((function(e){console.error(e.message)}))}}).call(this,n(64))},142:function(e,t,n){var r=n(143);"string"==typeof r&&(r=[[e.i,r,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};n(145)(r,a);r.locals&&(e.exports=r.locals)},143:function(e,t,n){(t=n(144)(!1)).push([e.i,'/*\nMIT License\n\nCopyright (c) 2018 Neutralinojs\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE. */\n\nbody {\n  margin: 0;\n  padding: 0;\n}\n\n#neutralinoapp {\n  text-align: center;\n}\n#neutralinoapp h1 {\n  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;\n  font-size: 20px;\n  color: #000000;\n}\n#neutralinoapp a {\n  /* margin-left: 12px; */\n}\n#neutralinoapp span {\n  font-size: 12px;\n  font-weight: normal;\n}\n\n.error-marker {\n  position: absolute;\n  border-radius: 4px;\n  background: #ff9999;\n  margin-left: -4px;\n  margin-top: -4px;\n  padding: 4px;\n}\n\n.valid-marker {\n  position: absolute;\n  border-radius: 4px;\n  background: #e3f1ff;\n  margin-left: -4px;\n  margin-top: -4px;\n  padding: 4px;\n}\n',""]),e.exports=t},295:function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),o=n(22),i=n.n(o),l=(n(142),n(26)),c=n(330),u=n(46);function f(){var e=m(["\n  padding: 10px;\n  background: red;\n"]);return f=function(){return e},e}function s(){var e=m(["\n  min-height: 200px;\n  padding: 0;\n  background: blue;\n"]);return s=function(){return e},e}function m(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}var p=u.a.section(s()),d=u.a.section(f()),y=function(e){var t=e.top,n=e.bottom;return a.a.createElement("main",null,a.a.createElement(p,null,t),a.a.createElement(d,null,n))},b=n(126),g=n.n(b),h=n(125),v=n.n(h),O=(n(155),n(63));function E(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==l.return||l.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return S(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return S(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function S(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var j=Object(l.b)({key:"queries",default:[]});n(217),n(218);function w(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==l.return||l.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return A(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return A(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function A(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var I=function(){var e=w(Object(r.useState)(""),2),t=e[0],n=e[1],o=w(Object(r.useState)(void 0),2),i=o[0],c=o[1],u=w(Object(r.useState)([]),2),f=u[0],s=u[1],m=w(Object(l.d)(j),2),p=(m[0],m[1]);Object(r.useEffect)((function(){if(i&&t){var e=t.split("\n"),n=function(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=e.split("\n").map((function(e,t){return[e,t]})),n=[],r=0,a=0;r<t.length;r++){var o=E(t[r],2),i=o[0],l=o[1];if(i.trim())if(Object(O.a)(i))n[a]={text:i.trim(),start:l,end:l},a++;else{var c=r>0?n[a-1]:{},u=c?c.text:void 0;if(u){var f=u+" "+i.trim();if(Object(O.a)(f)){n[a-1].text=f,n[a-1].end=l;continue}}i&&(n[a]={text:i.trim(),start:l,end:l},a++)}}return n.map((function(e){return[e,Object(O.a)(e.text)]}))}(t),r=g()(n.filter((function(e){var t=w(e,1)[0],n=t.start,r=t.end;return n<=i.row&&r>=i.row})))||[],a=w(r,2),o=a[0],l=a[1];if(o){for(var c=o.start,u=o.end,f=[],m=c;m<u+1;m++){var d=e[m];f.push({startRow:m,startCol:0,endRow:m,endCol:d.trim().length||10,className:l?"valid-marker":"error-marker",type:"background"})}s(f);var y=e.slice(c,u+1).join("\n");p([y])}else p([])}}),[t,i,p]);var d=Object(r.useCallback)((function(e){n(e)}),[n]),y=Object(r.useCallback)((function(e){c({row:e?e.cursor.row:void 0})}),[]);return a.a.createElement(v.a,{style:{width:"100%"},showGutter:!0,mode:"sql",theme:"xcode",name:"MAIN_EDITOR",value:t,onChange:d,onCursorChange:y,editorProps:{$blockScrolling:!0},markers:f})},x=n(317),C=n(82),T=n(320),R=n(333),k=n(47),P=n(328),N=n(83),D=n(131),M=n(318),B=n(314),L=n(319);function U(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==l.return||l.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return H(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return H(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function H(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var F=Object(l.b)({key:"profiles",default:{1:{id:"1",oauth:!0,name:"EOS QA",url:"https://test.salesforce.com",clientId:"1234",clientKey:"5678",username:"Foo",password:"bar"},2:{id:"2",oauth:!1,name:"EOS PROD",url:"https://test.salesforce.com",clientId:"aaaaa",clientKey:"ccccc",username:"Foo",password:"Bar"}}}),W=Object(l.c)({key:"findProfileSelector",get:function(e){var t=(0,e.get)(F);return function(e){return n=t,r=e,g()(Object.entries(n).filter((function(e){return U(e,1)[0]===r})).map((function(e){return U(e,2)[1]})));var n,r}}}),$=n(127),z=n.n($),G=n(329),_=n(327),K=n(312),Y=n(332),V=n(315),q=n(316);function J(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Q(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function X(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==l.return||l.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return Z(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Z(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Z(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var ee=function(e){var t=e.profile,n=void 0===t?{id:Object(G.a)()}:t,o=e.onCancel,i=e.onSave,l=e.onDelete,c=X(Object(r.useState)(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?J(Object(n),!0).forEach((function(t){Q(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):J(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},n)),2),u=c[0],f=c[1],s=Object(r.useCallback)((function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return f(Object(k.a)(u,(function(t){return z()(t,e)})))}),[u]),m=Object(r.useCallback)((function(e){return function(t){return s(Q({},e,t.target.checked))}}),[s]),p=Object(r.useCallback)((function(e){return function(t){return s(Q({},e,t.target.value))}}),[s]),d=Object(r.useCallback)((function(){i&&i(u)}),[u,i]),y=Object(r.useCallback)((function(){l&&l(u)}),[u,l]);return a.a.createElement(C.a,null,a.a.createElement(_.a,{label:"OAuth Mode",marginBottom:15},a.a.createElement(K.a,{checked:u.oauth,onChange:m("oauth")})),a.a.createElement(Y.a,{label:"Profile Name",value:u.name,marginBottom:5,marginRight:20,onChange:p("name")}),a.a.createElement(Y.a,{label:"URL",value:u.url,marginBottom:5,marginRight:20,onChange:p("url")}),a.a.createElement(Y.a,{label:"Username",value:u.username,marginBottom:5,marginRight:20,onChange:p("username")}),a.a.createElement(Y.a,{label:"Password",value:u.password,marginBottom:5,marginRight:20,onChange:p("password")}),a.a.createElement(Y.a,{label:"Client ID",value:u.clientId,marginBottom:5,marginRight:20,onChange:p("clientId")}),a.a.createElement(Y.a,{label:"Client Key",value:u.clientKey,marginBottom:15,marginRight:20,onChange:p("clientKey")}),a.a.createElement(C.a,{display:"flex",marginRight:20},a.a.createElement(C.a,null,a.a.createElement(B.a,{icon:V.a,intent:"danger",onClick:y})),a.a.createElement(C.a,{flex:1,display:"flex",justifyContent:"flex-end"}),a.a.createElement(D.a,{appearance:"minimal",onClick:o,marginRight:5},"Cancel"),a.a.createElement(D.a,{appearance:"primary",intent:"success",iconAfter:q.a,onClick:d},"Save")))};function te(){return(te=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function ne(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==l.return||l.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return re(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return re(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function re(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var ae=function(e){var t=ne(Object(r.useState)(void 0),2),n=t[0],o=t[1],i=ne(Object(r.useState)(!1),2),c=i[0],u=i[1],f=ne(Object(l.d)(F),2),s=f[0],m=f[1],p=Object(l.e)(W)(n),d=function(){o(void 0),u(!1)},y=function(e){!function(e){m(Object(k.a)(s,(function(t){t[e.id]=e})))}(e),d()},b=function(e){var t;t=e,m(Object(k.a)(s,(function(e){delete e[t.id]}))),d()};return a.a.createElement(C.a,te({margin:10,display:"flex",flexDirection:"column"},e),a.a.createElement(x.a,{size:600,marginBottom:20},"List of Profiles"),!p&&!c&&a.a.createElement(C.a,{flex:1,display:"flex",flexDirection:"column"},a.a.createElement(C.a,{flex:1,borderBottom:!0},a.a.createElement(P.a,null,Object.entries(s).map((function(e){var t=ne(e,2)[1];return a.a.createElement(P.a.Item,{onClick:function(){return e=t.id,o(e);var e}},a.a.createElement(N.a,null,t.name))})))),a.a.createElement(C.a,{margin:10,display:"flex",justifyContent:"flex-end"},a.a.createElement(D.a,{iconBefore:M.a,intent:"success",onClick:function(){return u(!0)}},"New Profile"))),p&&a.a.createElement(C.a,{display:"flex",alignItems:"flex-start",padding:20,margin:0,elevation:2},a.a.createElement(C.a,null,a.a.createElement(B.a,{icon:L.a,appearance:"minimal",onClick:d})),a.a.createElement(C.a,{paddingLeft:20,flex:1},a.a.createElement(x.a,{paddingTop:7,paddingBottom:10},"Editing Profile '",p.name,"'"),a.a.createElement(ee,{profile:p,onCancel:d,onSave:y,onDelete:b}))),c&&a.a.createElement(C.a,{display:"flex",alignItems:"flex-start",padding:20,margin:0,elevation:2},a.a.createElement(C.a,null,a.a.createElement(B.a,{icon:L.a,appearance:"minimal",onClick:d})),a.a.createElement(C.a,{paddingLeft:20,flex:1},a.a.createElement(x.a,{paddingTop:7,paddingBottom:10},"Create a New Profile"),a.a.createElement(ee,{onCancel:d,onSave:y,onDelete:b}))))};function oe(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==l.return||l.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return ie(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return ie(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ie(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var le=[{title:"Profile",component:a.a.createElement(ae,{flex:1})},{title:"Settings",component:a.a.createElement(x.a,null,"Under Construction")}],ce=function(){var e=oe(Object(r.useState)(0),2),t=e[0],n=e[1];return a.a.createElement(C.a,{height:"100%",display:"flex",flexDirection:"column"},a.a.createElement(x.a,{size:800,marginTop:5,marginLeft:5,marginBottom:20},"Configuration"),a.a.createElement(C.a,{display:"flex",flex:1},a.a.createElement(T.a,{marginRight:24,style:{minWidth:"200px"}},le.map((function(e,r){return a.a.createElement(R.a,{key:e.title,id:e.title,isSelected:r===t,onSelect:function(){return n(r)},margin:5},e.title)}))),a.a.createElement(C.a,{flex:1,display:"flex",flexDirection:"column"},le.map((function(e,n){return a.a.createElement(C.a,{flex:1,flexDirection:"column",display:n===t?"flex":"none"},e.component)})))))},ue=n(326),fe=n(324),se=n(325);function me(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==l.return||l.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return pe(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return pe(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function pe(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function de(){var e=function(e,t){t||(t=e.slice(0));return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(["\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  z-index: 2;\n  background: #fff;\n"]);return de=function(){return e},e}var ye=u.a.div(de()),be=function(e){var t=e.onMenu,n=me(Object(r.useState)(void 0),2),o=n[0],i=n[1],c=me(Object(l.d)(F),1)[0];return a.a.createElement(ye,null,a.a.createElement(C.a,{display:"flex",elevation:3,float:"right",padding:5},a.a.createElement(ue.a,{title:"Profile",selected:o,onSelect:function(e){return i(e.value)},options:Object.values(c).map((function(e){return{label:e.name,value:e}}))},a.a.createElement(D.a,{appearance:"minimal"},o?o.name:"Select a Profile...")),a.a.createElement(B.a,{appearance:"minimal",icon:fe.a,onClick:function(){return t(!0)}}),a.a.createElement(B.a,{appearance:"minimal",icon:se.a,intent:"success"})))};function ge(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,a=!1,o=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==l.return||l.return()}finally{if(a)throw o}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return he(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return he(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function he(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var ve=function(){var e=ge(Object(r.useState)(!1),2),t=e[0],n=e[1];return a.a.createElement(l.a,null,a.a.createElement(be,{onMenu:function(){return n(!0)}}),a.a.createElement(c.a,{isShown:t,onCloseComplete:function(){return n(!1)}},a.a.createElement(ce,null)),a.a.createElement(y,{top:a.a.createElement(I,null),bottom:a.a.createElement("div",null,"Bottom Part")}))},Oe=n(130);Neutralino.init({load:function(){},pingSuccessCallback:function(){},pingFailCallback:function(){}}),i.a.render(a.a.createElement(ve,null),document.getElementById("root")),Oe.a()}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,